// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/proto/game.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectToGameClient is the client API for ConnectToGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectToGameClient interface {
	Do(ctx context.Context, in *JoinGameRoomRequest, opts ...grpc.CallOption) (ConnectToGame_DoClient, error)
}

type connectToGameClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectToGameClient(cc grpc.ClientConnInterface) ConnectToGameClient {
	return &connectToGameClient{cc}
}

func (c *connectToGameClient) Do(ctx context.Context, in *JoinGameRoomRequest, opts ...grpc.CallOption) (ConnectToGame_DoClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConnectToGame_ServiceDesc.Streams[0], "/ConnectToGame/Do", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectToGameDoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConnectToGame_DoClient interface {
	Recv() (*GameRoom, error)
	grpc.ClientStream
}

type connectToGameDoClient struct {
	grpc.ClientStream
}

func (x *connectToGameDoClient) Recv() (*GameRoom, error) {
	m := new(GameRoom)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectToGameServer is the server API for ConnectToGame service.
// All implementations must embed UnimplementedConnectToGameServer
// for forward compatibility
type ConnectToGameServer interface {
	Do(*JoinGameRoomRequest, ConnectToGame_DoServer) error
	mustEmbedUnimplementedConnectToGameServer()
}

// UnimplementedConnectToGameServer must be embedded to have forward compatible implementations.
type UnimplementedConnectToGameServer struct {
}

func (UnimplementedConnectToGameServer) Do(*JoinGameRoomRequest, ConnectToGame_DoServer) error {
	return status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedConnectToGameServer) mustEmbedUnimplementedConnectToGameServer() {}

// UnsafeConnectToGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectToGameServer will
// result in compilation errors.
type UnsafeConnectToGameServer interface {
	mustEmbedUnimplementedConnectToGameServer()
}

func RegisterConnectToGameServer(s grpc.ServiceRegistrar, srv ConnectToGameServer) {
	s.RegisterService(&ConnectToGame_ServiceDesc, srv)
}

func _ConnectToGame_Do_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinGameRoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectToGameServer).Do(m, &connectToGameDoServer{stream})
}

type ConnectToGame_DoServer interface {
	Send(*GameRoom) error
	grpc.ServerStream
}

type connectToGameDoServer struct {
	grpc.ServerStream
}

func (x *connectToGameDoServer) Send(m *GameRoom) error {
	return x.ServerStream.SendMsg(m)
}

// ConnectToGame_ServiceDesc is the grpc.ServiceDesc for ConnectToGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectToGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ConnectToGame",
	HandlerType: (*ConnectToGameServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Do",
			Handler:       _ConnectToGame_Do_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/game.proto",
}
